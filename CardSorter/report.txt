From the users perspective, the program works by first reading from standard input. The first thing the user enters is an integer of the number of entries the program should expect. The user then enters entries in the form of {PlayerName} {Card} {Suit}. The program then outputs the Names entered in the order of holder of the highest card to holder of the lowest card, using suit to break ties. The program continues this process until the user enters a negative number.

From the programmers perspective, the program works by declaring a nested map. The card value is stored as the main key to a nested map. In the nested map, an integer representing a suit's rank is stored as a key and the value stored is the name of the card holder. The majority of the code is run inside a while loop that reads in a number of expected entries loops while a negative number isn't entered for the number of expected entries. A for loop then loops for the number of entries entered to read in the input. The name is read in as a string. The following input is read in as a char. The char is then converted to a integer by subtracting '0' from it and storing it as the Card Value. An if statement is then used to check for when the new value is greater than 9 and then uses another if statement to see if the value corresponds to a converted face card character. When true, the Card Value is updated to represent the rank of its corresponding face card. Another if statement is then used to see if a 1 is stored as the card value. If so it checks if the following char is a 0 which would mean that the card value should be 10 instead of 1. Cin then reads in a char corresponding to the suit. An if statement checks which suit character the input is equivalent to and then sets the Suit Value variable to an according rank, where 1 is the top tier and 4 is the lowest tier. The card value is then used to reference a key in the map and the insert function is called along with the make_pair function to set the Suit value as the key for the nested map and the name as the value for the nested map. A nested for loop then iterates through the main keys in a reverse order and sequentially through the nested keys in order to display just the names in the sorted order. The program then clears the nested map and then clears the main map before looping again through the while loop.

My approach was to store all the cards in a sorted order so that there was no need to compare them in order to have them sorted. This was done by using a nested map. The verified my output by making a separate .cpp file where I hardcoded the elements for a few keys in a nested map and then displayed its contents to see if they would be displayed in the order expected. I found this worked for getting the correct output. I also originally only cleared the main map, but this created memory leaks which I could see through valgrind. I fixed this by clearing the nested map before clearing the entire map.
