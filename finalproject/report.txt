report.txt
Zac Cendejas and Noelle Rosa

This program, from the user perspective starts by displaying a welcome message and instructions to press any key to begin or q to quit. When the user presses any key other than q, a countdown from five initializes and it then switches to the actual game. On the screen there is Baltasar the hovering snowman as well as a background of mountains slowly passing by as Baltasar moves through the game. The snowman has the ability to move to the right and the left (using the right and left arrows) as well as the ability to jump (up arrow) and spin down (the down arrow). Baltasar is bounded by the window but can move rather freely within that space. When moving the snowman it is helpful to click the arrows a couple times instead of holding them down in any given direction because it sometimes takes a bit for any user input to process. Once the program has started, Christmas trees and different-colored boxes intermittently appear coming from the right side of the screen, traveling straight across to the left. Baltasar has the ability to jump over the trees and roll under the presents whenever the corresponding keys are pressed. While this is occurring coins starting at various heights and speeds start traveling from right to the left on the screen. Some of the coins are high enough that you need to jump to reach them. Whenever he gets one of the coins the score for that game displayed in the upper right hand corner of the room is increased by one. Whenever Baltasar hits one of the objects he is supposed to avoid (a gift or a tree) that game ends and the user is prompted to enter his or her initials so that score can be saved. The user can play as many times as he or she would like until choosing to quit the program. At the end of each game a scoreboard with the scores and initials of all of the players from previous games will be displayed.

From the programming perspective, this program is broken up into four separate classes in addition to the main program and Makefile. The separate classes are "snowman", "gift", "tree", "coin" and "background." Within the snowman class the private information consists of the variables used to draw Baltasar as well as velocities for how fast the snowman can move in either direction and boolean values for whether of not the snowman can jump (aka is he already in the air). This class also consists of functions used to draw the snowman, move him in either direction, jump, roll, and reset the position of the snowman (it starts in the same place each time through the game). There is also a function to set the velocity of the snowman and many functions to get various points on the snowman and the radii of different parts on his body which are later used to test for collisions with objects.

The gift and tree classes contains private variables for the size and velocity of the trees and boxes. There are also specific variables for each of the different colored boxes and the different colored ribbons on each of the boxes in the gift class. A lot of the functions for these classes are similar to the snowman class. There are functions to draw the boxes (within this function the color changes) and to draw the trees with ornaments on them. There is a function to move the gift and there is a function to move the tree. This motion is slightly different than the snowman because these objects are only moving in one direction (left) whereas the snowman could move pretty freely. These objects are drawn on the right side of the window (out of view) and then they move until they are out of view on the left side when their positions are reset on the right side of the screen. Additionally, there are functions to get different points on the trees and boxes that are used to test for collision with Baltasar in the main program. 

The coin class similarly has private variables that are used in the drawCoin function to create the coins in the window. There are different shades of yellow and gold that are also saved as private data. There are functions that set the starting position of each of the coins. This function randomly assigns an x value right around the right edge of the window and it randomly assigns a y value within the range of y values Baltasar can reach. The velocity of each coin is also randomly set in this function. The moveCoin function moves the pieces of the coin uniformly across the window from left to right at the varying speeds. There are also functions to get certain attributes of the coin to test for collision with Baltasar. 

The background function draws the snow covered mountains and clouds in the background of the game and has a method to move them slowly across the screen as the snowman proceeds through the game. This class basically draws a mountain range the length of two windows and once the left edge reaches the negative width of the window it resets to the beginning. There are private variables with all the points used to create the mountains as well as functions to draw, move, and reset the background. 

The main function is started by opening and clearing the window. The StartingDisplay() function is called and shows the list of instructions to the user. It waits for any one of the buttons to be pressed by labeling and click or move of the mouse as junk and looking for an input of 1. Once the program registers that the user has pressed a button to begin the game, the DisplayCountdown() function is called and the window is cleared. If there is already a score saved in the vector of scores then the score window will be displayed. If the game was just begin however, the game will simply start. The background and the snowman are drawn to begin with using the methods from the Snowman and Background classes. There is then a switch statement that takes in the input from the user and moves the snowman accordingly by using methods from that class. Next the program uses the SelectObject function which randomly chooses one of the objects to be avoided by the snowman and then uses a switch statement that sends that object depending on which of the six is selected(five of the six are different colors of the boxes). Every time you pass three of the objects the difficulty is increased by speeding up the objects. Next in the code the four coins are drawn and moved using methods from the coin class. Every time one of the coins is collected (tested using the CollectCoin function that calculates the distance between the coin and the snowman and if the distance is zero it registers the coin as being caught), the score is increased. Once one of the coins is caught it is restarted around the right edge of the window at a new randomly selected height with a new randomly selected velocity. If any one of the coins gets to the left edge of the screen without being caught the same thing occurs. The program then checks for collision with the obstacles using a similar method to the checking for coins. If there is a collision there is a break in the code because the user has lost the game. There is then an if statement that makes sure that the user input is only read in once, otherwise every time a key is clicked it registers both the click and the release.  Whenever the player hits something and loses the game the first while loop is ended and a new one begins with a prompt for the user to enter their initials. This is so the game score can be saved under that. There are then three while loops that take in three letters by making sure they are letters and labelling all other user input as junk and adding the new initial to the string NewInitials. The program then checks the initials by verifying with the user by asking them to type 'y' or 'n'. If the initials are incorrect the user can re-enter them. Once the initials are verified as being correct the new initials are pushed back on the Initials vector (a vector of strings) and the score number is pushed back on the Scores vector (a vector of ints) so these values are corresponding elements on these vectors. The score number is reset and the score screen is displayed with the initials as well as their corresponding scores. Once all of this is done, all of the variables are reset and that while loop ends and goes back to the beginning where the game starts again.

We verified our program for accuracy mainly by playing it in a variety of different ways, testing for any possible input from the user to see if the program reacts well. We checked calculations on things like whether the points on the gifts and trees we were using to test for collision were sufficient so that the snowman would never be hit by any part of the object. We checked the different levels of difficulty to make sure that the game actually was getting progressively faster and more challenging. We tested playing a number of different games in one sitting to make sure the Score board displays correctly with a number of different games in the vectors. 
